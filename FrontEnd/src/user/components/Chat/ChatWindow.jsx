import React, { useState, useEffect, useRef } from 'react';
import chatService from '../../../services/chatService';
import autoChatService from '../../../services/autoChatService';
import ChatPopup from './ChatPopup';
import './ChatWindow.css';

const ChatWindow = ({ 
  conversation, 
  isConnected, 
  newIncomingMessage,
  chatMode,
  showModeSelector,
  onClose, 
  onNewMessageProcessed,
  onModeSelection
}) => {
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState('');
  const [loading, setLoading] = useState(false);
  const [sending, setSending] = useState(false);
  const [currentConversation, setCurrentConversation] = useState(conversation);
  const [connectionStatus, setConnectionStatus] = useState('PENDING');
  const [supportAgent, setSupportAgent] = useState(null);
  const [popup, setPopup] = useState({ show: false, type: '', title: '', message: '' });
  const [isAutoMode, setIsAutoMode] = useState(false);
  const [autoInitialized, setAutoInitialized] = useState(false);
  const [currentMenuId, setCurrentMenuId] = useState('welcome');
  const [showConnectionNotification, setShowConnectionNotification] = useState(false);
  
  const messagesEndRef = useRef(null);
  const inputRef = useRef(null);

  // Load messages khi conversation thay ƒë·ªïi
  useEffect(() => {
    if (currentConversation) {
      loadMessages();
      updateConnectionStatus();
    }
  }, [currentConversation]);

  // Theo d√µi chatMode v√† kh·ªüi t·∫°o auto chat
  useEffect(() => {
    setIsAutoMode(chatMode === 'auto');
    
    if (chatMode === 'auto' && currentConversation && !autoInitialized) {
      const timer = setTimeout(() => {
        initializeAutoChat();
      }, 500);
      
      return () => clearTimeout(timer);
    }
  }, [chatMode, currentConversation, autoInitialized]);

  // Sync conversation t·ª´ parent component
  useEffect(() => {
    if (conversation && conversation !== currentConversation) {
      setCurrentConversation(conversation);
    }
  }, [conversation]);

  // X·ª≠ l√Ω tin nh·∫Øn m·ªõi t·ª´ WebSocket
  useEffect(() => {
    if (newIncomingMessage) {
      console.log('üì® Processing new incoming message:', newIncomingMessage);
      
      // CH·ªà th√™m tin nh·∫Øn t·ª´ admin/system, KH√îNG th√™m tin nh·∫Øn c·ªßa user
      if (newIncomingMessage.isFromAdmin || newIncomingMessage.messageSource === 'SYSTEM' || newIncomingMessage.messageSource === 'CHATBOT') {
        setMessages(prev => {
          // Ki·ªÉm tra duplicate theo ID
          const exists = prev.some(msg => msg.id === newIncomingMessage.id);
          if (!exists) {
            console.log('‚úÖ Adding new message from WebSocket:', newIncomingMessage.id);
            return [...prev, newIncomingMessage];
          } else {
            console.log('‚ö†Ô∏è Duplicate message ignored:', newIncomingMessage.id);
            return prev;
          }
        });

        // Scroll to bottom
        setTimeout(scrollToBottom, 100);
        
        // ƒê√°nh d·∫•u ƒë√£ ƒë·ªçc tin nh·∫Øn
        if (currentConversation) {
          markMessagesAsRead();
        }
      }

      // Ki·ªÉm tra n·∫øu l√† tin nh·∫Øn admin assignment (k·∫øt n·ªëi)
      if (newIncomingMessage.isFromAdmin && 
          newIncomingMessage.content.includes('ƒë√£ ƒë∆∞·ª£c k·∫øt n·ªëi ƒë·ªÉ h·ªó tr·ª£')) {
        setConnectionStatus('CONNECTED');
        setSupportAgent(newIncomingMessage.senderName);
        setShowConnectionNotification(true);
        setTimeout(() => setShowConnectionNotification(false), 3000);
        console.log('‚úÖ ƒê√£ k·∫øt n·ªëi v·ªõi nh√¢n vi√™n:', newIncomingMessage.senderName);
      }

      // ƒê√°nh d·∫•u ƒë√£ x·ª≠ l√Ω message
      if (onNewMessageProcessed) {
        onNewMessageProcessed();
      }
    }
  }, [newIncomingMessage]);

  // Auto scroll to bottom khi c√≥ tin nh·∫Øn m·ªõi
  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const updateConnectionStatus = () => {
    if (!currentConversation) {
      setConnectionStatus('PENDING');
      return;
    }

    switch (currentConversation.status) {
      case 'PENDING':
        setConnectionStatus('PENDING');
        setSupportAgent(null);
        break;
      case 'OPEN':
        setConnectionStatus('CONNECTED');
        const assignmentMessage = messages.find(msg => 
          msg.isFromAdmin && msg.content.includes('ƒë√£ ƒë∆∞·ª£c k·∫øt n·ªëi ƒë·ªÉ h·ªó tr·ª£')
        );
        if (assignmentMessage) {
          setSupportAgent(assignmentMessage.senderName);
        }
        break;
      case 'CLOSED':
        setConnectionStatus('CLOSED');
        break;
      default:
        setConnectionStatus('PENDING');
    }
  };

  const loadMessages = async () => {
    if (!currentConversation) return;
    
    setLoading(true);
    try {
      const messagesData = await chatService.getConversationMessages(currentConversation.id, 0, 50);
      setMessages(messagesData.reverse());
    } catch (error) {
      console.error('Error loading messages:', error);
    } finally {
      setLoading(false);
    }
  };

  const initializeAutoChat = async () => {
    try {
      console.log('ü§ñ Initializing auto chat...');
      const response = await autoChatService.initializeChat(currentConversation.id);
      
      if (response.success) {
        console.log('‚úÖ Auto chat initialized successfully');
        setAutoInitialized(true);
        loadMessages(); // Reload ƒë·ªÉ l·∫•y tin nh·∫Øn welcome
      }
    } catch (error) {
      console.error('‚ùå Error initializing auto chat:', error);
    }
  };

  const handleSendMessage = async (messageContent = null) => {
    const content = messageContent || newMessage.trim();
    if (!content || sending || !currentConversation) return;

    setSending(true);
    
    // Th√™m tin nh·∫Øn c·ªßa user v√†o UI ngay l·∫≠p t·ª©c
    const tempMessage = {
      id: Date.now(),
      content: content,
      isFromAdmin: false,
      timestamp: new Date().toISOString(),
      senderName: 'B·∫°n'
    };
    
    setMessages(prev => [...prev, tempMessage]);
    setNewMessage('');

    try {
      let response;
      
      if (isAutoMode) {
        // G·ª≠i tin nh·∫Øn qua auto chat service
        response = await autoChatService.sendMessage(currentConversation.id, content, currentMenuId);
      } else {
        // G·ª≠i tin nh·∫Øn qua chat service th√¥ng th∆∞·ªùng
        response = await chatService.sendMessage(currentConversation.id, content);
      }

      if (response.success) {
        console.log('‚úÖ Message sent successfully');
        // Reload messages ƒë·ªÉ ƒë·ªìng b·ªô v·ªõi server
        loadMessages();
        
        if (isAutoMode && response.menuId) {
          setCurrentMenuId(response.menuId);
        }
      }
    } catch (error) {
      console.error('‚ùå Error sending message:', error);
      showPopup('error', 'L·ªói', 'Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn. Vui l√≤ng th·ª≠ l·∫°i!');
      
      // X√≥a tin nh·∫Øn t·∫°m n·∫øu g·ª≠i th·∫•t b·∫°i
      setMessages(prev => prev.filter(msg => msg.id !== tempMessage.id));
    } finally {
      setSending(false);
    }
  };

  const handleQuickReply = (reply) => {
    handleSendMessage(reply);
  };

  const markMessagesAsRead = async () => {
    if (!currentConversation) return;
    
    try {
      await chatService.markMessagesAsRead(currentConversation.id);
    } catch (error) {
      console.error('Error marking messages as read:', error);
    }
  };

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  const showPopup = (type, title, message) => {
    setPopup({ show: true, type, title, message });
  };

  const closePopup = () => {
    setPopup({ show: false, type: '', title: '', message: '' });
  };

  const formatTimestamp = (timestamp) => {
    const date = new Date(timestamp);
    return date.toLocaleTimeString('vi-VN', { 
      hour: '2-digit', 
      minute: '2-digit' 
    });
  };

  const getConnectionStatusText = () => {
    switch (connectionStatus) {
      case 'PENDING':
        return 'ƒêang ch·ªù k·∫øt n·ªëi...';
      case 'CONNECTED':
        return supportAgent ? `ƒêang chat v·ªõi ${supportAgent}` : 'ƒê√£ k·∫øt n·ªëi';
      case 'CLOSED':
        return 'Cu·ªôc tr√≤ chuy·ªán ƒë√£ k·∫øt th√∫c';
      default:
        return 'ƒêang k·∫øt n·ªëi...';
    }
  };

  const getConnectionStatusClass = () => {
    switch (connectionStatus) {
      case 'PENDING':
        return 'status-pending';
      case 'CONNECTED':
        return 'status-connected';
      case 'CLOSED':
        return 'status-closed';
      default:
        return 'status-pending';
    }
  };

  // Render mode selector n·∫øu c·∫ßn
  if (showModeSelector) {
    return (
      <div className="chat-window">
        <div className="chat-header">
          <div className="chat-title">
            <h4>Ch·ªçn lo·∫°i h·ªó tr·ª£</h4>
          </div>
          <button className="close-button" onClick={onClose}>
            <i className="fa fa-times"></i>
          </button>
        </div>
        
        <div className="mode-selector">
          <div className="mode-option" onClick={() => onModeSelection('auto')}>
            <div className="mode-icon">
              <i className="fa fa-robot"></i>
            </div>
            <div className="mode-content">
              <h5>H·ªó tr·ª£ t·ª± ƒë·ªông</h5>
              <p>Nh·∫≠n h·ªó tr·ª£ nhanh v·ªõi chatbot th√¥ng minh</p>
            </div>
          </div>
          
          <div className="mode-option" onClick={() => onModeSelection('live')}>
            <div className="mode-icon">
              <i className="fa fa-user"></i>
            </div>
            <div className="mode-content">
              <h5>Chat v·ªõi nh√¢n vi√™n</h5>
              <p>Tr√≤ chuy·ªán tr·ª±c ti·∫øp v·ªõi nh√¢n vi√™n h·ªó tr·ª£</p>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="chat-window">
      {/* Header */}
      <div className="chat-header">
        <div className="chat-title">
          <div className="avatar">
            {isAutoMode ? (
              <i className="fa fa-robot"></i>
            ) : (
              <i className="fa fa-headset"></i>
            )}
          </div>
          <div className="title-content">
            <h4>{isAutoMode ? 'H·ªó tr·ª£ t·ª± ƒë·ªông' : 'H·ªó tr·ª£ kh√°ch h√†ng'}</h4>
            <span className={`status ${getConnectionStatusClass()}`}>
              {getConnectionStatusText()}
            </span>
          </div>
        </div>
        <button className="close-button" onClick={onClose}>
          <i className="fa fa-times"></i>
        </button>
      </div>

      {/* Connection notification */}
      {showConnectionNotification && (
        <div className="connection-notification">
          <i className="fa fa-check-circle"></i>
          <span>ƒê√£ k·∫øt n·ªëi v·ªõi {supportAgent}</span>
        </div>
      )}

      {/* Messages */}
      <div className="chat-messages">
        {loading ? (
          <div className="loading-indicator">
            <i className="fa fa-spinner fa-spin"></i>
            <span>ƒêang t·∫£i tin nh·∫Øn...</span>
          </div>
        ) : (
          <>
            {messages.length === 0 ? (
              <div className="empty-messages">
                <div className="welcome-message">
                  <i className="fa fa-comments"></i>
                  <h5>Ch√†o m·ª´ng b·∫°n!</h5>
                  <p>
                    {isAutoMode 
                      ? 'T√¥i l√† tr·ª£ l√Ω ·∫£o, s·∫µn s√†ng h·ªó tr·ª£ b·∫°n.'
                      : 'Ch√∫ng t√¥i s·∫Ω h·ªó tr·ª£ b·∫°n trong th·ªùi gian s·ªõm nh·∫•t.'
                    }
                  </p>
                </div>
              </div>
            ) : (
              messages.map((message, index) => (
                <div
                  key={message.id || index}
                  className={`message ${message.isFromAdmin ? 'admin' : 'user'}`}
                >
                  <div className="message-content">
                    <div className="message-text">
                      {message.content}
                    </div>
                    <div className="message-time">
                      {formatTimestamp(message.timestamp)}
                    </div>
                  </div>
                </div>
              ))
            )}
            <div ref={messagesEndRef} />
          </>
        )}
      </div>

      {/* Input */}
      <div className="chat-input">
        <div className="input-container">
          <input
            ref={inputRef}
            type="text"
            value={newMessage}
            onChange={(e) => setNewMessage(e.target.value)}
            onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
            placeholder="Nh·∫≠p tin nh·∫Øn..."
            disabled={sending}
          />
          <button
            className="send-button"
            onClick={() => handleSendMessage()}
            disabled={!newMessage.trim() || sending}
          >
            {sending ? (
              <i className="fa fa-spinner fa-spin"></i>
            ) : (
              <i className="fa fa-paper-plane"></i>
            )}
          </button>
        </div>
      </div>

      {/* Popup */}
      {popup.show && (
        <ChatPopup
          type={popup.type}
          title={popup.title}
          message={popup.message}
          onClose={closePopup}
        />
      )}
    </div>
  );
};

export default ChatWindow; 