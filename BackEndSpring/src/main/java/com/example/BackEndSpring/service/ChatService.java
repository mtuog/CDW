package com.example.BackEndSpring.service;

import com.example.BackEndSpring.dto.ChatConversationDTO;
import com.example.BackEndSpring.dto.ChatMessageDTO;
import com.example.BackEndSpring.model.ChatConversation;
import com.example.BackEndSpring.model.ChatConversation.ConversationStatus;
import com.example.BackEndSpring.model.ChatMessage;
import com.example.BackEndSpring.model.Role;
import com.example.BackEndSpring.model.User;
import com.example.BackEndSpring.repository.ChatConversationRepository;
import com.example.BackEndSpring.repository.ChatMessageRepository;
import com.example.BackEndSpring.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
@Transactional
public class ChatService {
    
    @Autowired
    private ChatConversationRepository conversationRepository;
    
    @Autowired
    private ChatMessageRepository messageRepository;
    
    @Autowired
    private UserRepository userRepository;
    
    @Autowired
    private SimpMessagingTemplate messagingTemplate;
    
    /**
     * T·∫°o cu·ªôc h·ªôi tho·∫°i m·ªõi ho·∫∑c l·∫•y cu·ªôc h·ªôi tho·∫°i hi·ªán c√≥
     */
    public ChatConversationDTO createOrGetConversation(Long userId, String subject) {
        User user = userRepository.findById(userId)
            .orElseThrow(() -> new RuntimeException("User not found"));
        
        // Live Support: User ch·ªâ c√≥ th·ªÉ c√≥ 1 conversation PENDING ho·∫∑c OPEN t·∫°i 1 th·ªùi ƒëi·ªÉm
        Optional<ChatConversation> pendingConversation = 
            conversationRepository.findByUserAndStatus(user, ConversationStatus.PENDING);
        
        Optional<ChatConversation> openConversation = 
            conversationRepository.findByUserAndStatus(user, ConversationStatus.OPEN);
        
        ChatConversation conversation;
        
        if (openConversation.isPresent()) {
            // User ƒë√£ c√≥ conversation ƒëang OPEN - return existing
            conversation = openConversation.get();
        } else if (pendingConversation.isPresent()) {
            // User ƒë√£ c√≥ conversation ƒëang PENDING - return existing
            conversation = pendingConversation.get();
            // C·∫≠p nh·∫≠t subject n·∫øu c√≥
            if (subject != null && !subject.trim().isEmpty()) {
                conversation.setSubject(subject);
                conversation = conversationRepository.save(conversation);
            }
        } else {
            // T·∫°o conversation m·ªõi v·ªõi tr·∫°ng th√°i PENDING (ch·ªù admin)
            conversation = new ChatConversation(user, subject);
            conversation.setStatus(ConversationStatus.PENDING);
            conversation = conversationRepository.save(conversation);
            
            // KH√îNG g·ª≠i tin nh·∫Øn ch√†o m·ª´ng t·ª± ƒë·ªông n·ªØa
            // User s·∫Ω g·ª≠i tin nh·∫Øn ƒë·∫ßu ti√™n khi s·∫µn s√†ng
            
            // Th√¥ng b√°o cho admin c√≥ y√™u c·∫ßu h·ªó tr·ª£ m·ªõi
            notifyAdminsNewConversation(conversation);
        }
        
        return convertToConversationDTO(conversation);
    }
    
    /**
     * G·ª≠i tin nh·∫Øn
     */
    public ChatMessageDTO sendMessage(Long conversationId, Long senderId, String content) {
        ChatConversation conversation = conversationRepository.findById(conversationId)
            .orElseThrow(() -> new RuntimeException("Conversation not found"));
        
        User sender = userRepository.findById(senderId)
            .orElseThrow(() -> new RuntimeException("User not found"));
        
        // Debug log
        System.out.println("üîç ChatService.sendMessage:");
        System.out.println("   - Conversation ID: " + conversationId);
        System.out.println("   - Sender ID: " + senderId);
        System.out.println("   - Sender name: " + sender.getUsername());
        System.out.println("   - Sender roles: " + sender.getRoles().stream()
            .map(role -> role.getName()).reduce("", (a, b) -> a + "," + b));
        
        boolean isFromAdmin = isUserAdmin(sender);
        System.out.println("   - Is from admin: " + isFromAdmin);
        System.out.println("   - Conversation status: " + conversation.getStatus());
        
        // Ki·ªÉm tra tr·∫°ng th√°i conversation - Kh√¥ng cho ph√©p g·ª≠i tin nh·∫Øn trong conversation ƒë√£ ƒë√≥ng
        if (conversation.getStatus() == ConversationStatus.CLOSED) {
            throw new RuntimeException("Conversation is closed. Please create a new conversation for further support.");
        }
        
        // LIVE SUPPORT RULE: User kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn khi PENDING (ch∆∞a c√≥ admin)
        if (!isFromAdmin && conversation.getStatus() == ConversationStatus.PENDING) {
            throw new RuntimeException("Please wait for an agent to be connected. Your conversation is in queue.");
        }
        
        // LIVE SUPPORT RULE: Ch·ªâ admin m·ªõi c√≥ th·ªÉ chuy·ªÉn PENDING ‚Üí OPEN b·∫±ng c√°ch ASSIGN conversation
        ConversationStatus currentStatus = conversation.getStatus();
        
        // T·∫°o tin nh·∫Øn m·ªõi
        ChatMessage message = new ChatMessage(conversation, sender, content);
        message = messageRepository.save(message);
        
        // C·∫≠p nh·∫≠t th·ªùi gian tin nh·∫Øn cu·ªëi c·ªßa cu·ªôc h·ªôi tho·∫°i
        conversation.setLastMessageAt(LocalDateTime.now());
        
        // KH√îNG T·ª∞ ƒê·ªòNG chuy·ªÉn tr·∫°ng th√°i t·ª´ PENDING ‚Üí OPEN khi g·ª≠i tin nh·∫Øn
        // Tr·∫°ng th√°i ch·ªâ thay ƒë·ªïi khi admin ASSIGN conversation th√¥ng qua assignAdminToConversation()
        System.out.println("   - Message sent, conversation status remains: " + currentStatus);
        
        // C·∫≠p nh·∫≠t unread count
        if (isFromAdmin) {
            conversation.incrementUnreadCountUser();
        } else {
            conversation.incrementUnreadCountAdmin();
        }
        
        conversationRepository.save(conversation);
        
        // G·ª≠i tin nh·∫Øn real-time
        ChatMessageDTO messageDTO = convertToMessageDTO(message);
        sendRealTimeMessage(messageDTO, isFromAdmin);
        
        return messageDTO;
    }
    
    /**
     * L·∫•y conversation ACTIVE c·ªßa user (PENDING ho·∫∑c OPEN) - Live Support ch·ªâ c√≥ 1
     */
    public ChatConversationDTO getUserActiveConversation(Long userId) {
        User user = userRepository.findById(userId)
            .orElseThrow(() -> new RuntimeException("User not found"));
        
        // Live Support: User ch·ªâ c√≥ th·ªÉ xem conversation ƒëang ACTIVE
        Optional<ChatConversation> activeConversation = 
            conversationRepository.findByUserAndStatus(user, ConversationStatus.OPEN);
        
        if (activeConversation.isEmpty()) {
            activeConversation = conversationRepository.findByUserAndStatus(user, ConversationStatus.PENDING);
        }
        
        return activeConversation.map(this::convertToConversationDTO).orElse(null);
    }
    
    /**
     * L·∫•y danh s√°ch cu·ªôc h·ªôi tho·∫°i c·ªßa user (deprecated - ch·ªâ d√πng cho admin)
     */
    @Deprecated
    public List<ChatConversationDTO> getUserConversations(Long userId) {
        User user = userRepository.findById(userId)
            .orElseThrow(() -> new RuntimeException("User not found"));
        
        List<ChatConversation> conversations = conversationRepository.findByUserOrderByLastMessageAtDesc(user);
        return conversations.stream()
            .map(this::convertToConversationDTO)
            .collect(Collectors.toList());
    }
    
    /**
     * L·∫•y danh s√°ch cu·ªôc h·ªôi tho·∫°i cho admin
     */
    public Page<ChatConversationDTO> getAdminConversations(int page, int size) {
        Pageable pageable = PageRequest.of(page, size);
        Page<ChatConversation> conversations = conversationRepository.findAllOrderByLastMessageAtDesc(pageable);
        
        return conversations.map(this::convertToConversationDTO);
    }
    
    /**
     * L·∫•y cu·ªôc h·ªôi tho·∫°i ch·ªù x·ª≠ l√Ω
     */
    public List<ChatConversationDTO> getPendingConversations() {
        List<ChatConversation> conversations = 
            conversationRepository.findByStatusAndAdminIsNullOrderByCreatedAtAsc(ConversationStatus.PENDING);
        
        return conversations.stream()
            .map(this::convertToConversationDTO)
            .collect(Collectors.toList());
    }
    
    /**
     * G√°n admin x·ª≠ l√Ω cu·ªôc h·ªôi tho·∫°i
     */
    public ChatConversationDTO assignAdminToConversation(Long conversationId, Long adminId) {
        ChatConversation conversation = conversationRepository.findById(conversationId)
            .orElseThrow(() -> new RuntimeException("Conversation not found"));
        
        User admin = userRepository.findById(adminId)
            .orElseThrow(() -> new RuntimeException("Admin not found"));
        
        if (!isUserAdmin(admin)) {
            throw new RuntimeException("User is not an admin");
        }
        
        // LIVE SUPPORT RULE: Admin ch·ªâ ƒë∆∞·ª£c handle 1 conversation active t·∫°i m·ªôt th·ªùi ƒëi·ªÉm
        Optional<ChatConversation> adminActiveConversation = conversationRepository.findByAdminAndStatus(admin, ConversationStatus.OPEN);
        if (adminActiveConversation.isPresent() && !adminActiveConversation.get().getId().equals(conversationId)) {
            throw new RuntimeException("Admin is already handling another active conversation. Please finish the current conversation first.");
        }
        
        // L∆∞u admin c≈© ƒë·ªÉ so s√°nh
        User previousAdmin = conversation.getAdmin();
        
        conversation.setAdmin(admin);
        conversation.setStatus(ConversationStatus.OPEN);
        conversation = conversationRepository.save(conversation);
        
        // T·∫°o tin nh·∫Øn th√¥ng b√°o admin assignment
        String adminName = admin.getFullName() != null ? admin.getFullName() : admin.getUsername();
        String notificationContent;
        
        if (previousAdmin == null) {
            // Admin ƒë·∫ßu ti√™n nh·∫≠n cu·ªôc h·ªôi tho·∫°i
            notificationContent = String.format(
                "üë§ %s ƒë√£ ƒë∆∞·ª£c k·∫øt n·ªëi ƒë·ªÉ h·ªó tr·ª£ b·∫°n.\n\nXin ch√†o! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay?", 
                adminName
            );
        } else if (!previousAdmin.getId().equals(adminId)) {
            // Chuy·ªÉn giao gi·ªØa c√°c admin
            String previousAdminName = previousAdmin.getFullName() != null ? 
                                     previousAdmin.getFullName() : previousAdmin.getUsername();
            notificationContent = String.format(
                "üîÑ Cu·ªôc h·ªôi tho·∫°i ƒë√£ ƒë∆∞·ª£c chuy·ªÉn giao t·ª´ %s cho %s.\n\nXin ch√†o! T√¥i s·∫Ω ti·∫øp t·ª•c h·ªó tr·ª£ b·∫°n.", 
                previousAdminName, adminName
            );
        } else {
            // C√πng admin m·ªü l·∫°i conversation ƒë√£ ƒë√≥ng
            notificationContent = String.format(
                "üîì %s ƒë√£ m·ªü l·∫°i cu·ªôc h·ªôi tho·∫°i.\n\nT√¥i c√≥ th·ªÉ ti·∫øp t·ª•c h·ªó tr·ª£ b·∫°n!", 
                adminName
            );
        }
        
        // G·ª≠i tin nh·∫Øn th√¥ng b√°o
        ChatMessage assignmentMessage = new ChatMessage(conversation, admin, notificationContent);
        assignmentMessage = messageRepository.save(assignmentMessage);
        
        // G·ª≠i realtime notification
        ChatMessageDTO messageDTO = convertToMessageDTO(assignmentMessage);
        sendRealTimeMessage(messageDTO, true);
        
        return convertToConversationDTO(conversation);
    }
    
    /**
     * L·∫•y tin nh·∫Øn trong cu·ªôc h·ªôi tho·∫°i
     */
    public List<ChatMessageDTO> getConversationMessages(Long conversationId, int page, int size) {
        ChatConversation conversation = conversationRepository.findById(conversationId)
            .orElseThrow(() -> new RuntimeException("Conversation not found"));
        
        Pageable pageable = PageRequest.of(page, size);
        Page<ChatMessage> messages = messageRepository.findByConversationOrderBySentAtDesc(conversation, pageable);
        
        return messages.getContent().stream()
            .map(this::convertToMessageDTO)
            .collect(Collectors.toList());
    }
    
    /**
     * ƒê√°nh d·∫•u tin nh·∫Øn ƒë√£ ƒë·ªçc
     */
    public void markMessagesAsRead(Long conversationId, Long userId) {
        ChatConversation conversation = conversationRepository.findById(conversationId)
            .orElseThrow(() -> new RuntimeException("Conversation not found"));
        
        User user = userRepository.findById(userId)
            .orElseThrow(() -> new RuntimeException("User not found"));
        
        // ƒê√°nh d·∫•u tin nh·∫Øn ƒë√£ ƒë·ªçc
        messageRepository.markMessagesAsReadInConversation(conversation, user, LocalDateTime.now());
        
        // Reset unread count
        boolean isFromAdmin = isUserAdmin(user);
        if (isFromAdmin) {
            conversation.resetUnreadCountAdmin();
        } else {
            conversation.resetUnreadCountUser();
        }
        
        conversationRepository.save(conversation);
    }
    
    /**
     * Admin ƒë√≥ng cu·ªôc h·ªôi tho·∫°i v√† th√¥ng b√°o cho user
     */
    public void closeConversation(Long conversationId) {
        ChatConversation conversation = conversationRepository.findById(conversationId)
            .orElseThrow(() -> new RuntimeException("Conversation not found"));
        
        // T·∫°o tin nh·∫Øn h·ªá th·ªëng th√¥ng b√°o cu·ªôc h·ªôi tho·∫°i ƒë√£ ƒë√≥ng
        User systemUser = getSystemUser();
        ChatMessage closeMessage = new ChatMessage(
            conversation, 
            systemUser, 
            "üì¢ TH√îNG B√ÅO: Cu·ªôc h·ªôi tho·∫°i ƒë√£ ƒë∆∞·ª£c ƒë√≥ng b·ªüi nh√¢n vi√™n h·ªó tr·ª£.\n\n" +
            "C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá v·ªõi VTX STORE! N·∫øu b·∫°n c·∫ßn h·ªó tr·ª£ th√™m, vui l√≤ng t·∫°o cu·ªôc h·ªôi tho·∫°i m·ªõi."
        );
        messageRepository.save(closeMessage);
        
        // C·∫≠p nh·∫≠t tr·∫°ng th√°i cu·ªôc h·ªôi tho·∫°i
        conversation.setStatus(ConversationStatus.CLOSED);
        conversationRepository.save(conversation);
        
        // G·ª≠i th√¥ng b√°o realtime cho user
        ChatMessageDTO messageDTO = convertToMessageDTO(closeMessage);
        sendRealTimeMessage(messageDTO, isUserAdmin(systemUser));
        
        // C·∫≠p nh·∫≠t danh s√°ch cu·ªôc h·ªôi tho·∫°i
        messagingTemplate.convertAndSend(
            "/topic/admin/chat/conversations-update", 
            conversation.getId()
        );
    }
    
    /**
     * L·∫•y user h·ªá th·ªëng ƒë·ªÉ g·ª≠i tin nh·∫Øn h·ªá th·ªëng
     */
    private User getSystemUser() {
        // Ki·ªÉm tra xem c√≥ system user ch∆∞a
        Optional<User> systemUser = userRepository.findByEmail("system@vtxstore.com");
        if (systemUser.isPresent()) {
            return systemUser.get();
        }
        
        // N·∫øu ch∆∞a c√≥, t√¨m m·ªôt admin user ƒë·ªÉ d√πng
        Optional<User> adminUser = userRepository.findAll().stream()
            .filter(user -> user.getRoles().stream()
                .anyMatch(role -> role.getName().equals("ADMIN")))
            .findFirst();
            
        if (adminUser.isPresent()) {
            return adminUser.get();
        }
        
        // N·∫øu kh√¥ng t√¨m th·∫•y admin, d√πng user ƒë·∫ßu ti√™n
        return userRepository.findAll().stream()
            .findFirst()
            .orElseThrow(() -> new RuntimeException("No users found to send system message"));
    }
    
    /**
     * User ƒë√≥ng conversation (logout ho·∫∑c ƒë√≥ng tab)
     */
    public void closeConversationByUser(Long conversationId, Long userId) {
        ChatConversation conversation = conversationRepository.findById(conversationId)
            .orElseThrow(() -> new RuntimeException("Conversation not found"));
        
        // Ki·ªÉm tra user c√≥ quy·ªÅn ƒë√≥ng conversation n√†y kh√¥ng
        if (!conversation.getUser().getId().equals(userId)) {
            throw new RuntimeException("User not authorized to close this conversation");
        }
        
        // Live Support: User logout/ƒë√≥ng tab = k·∫øt th√∫c conversation
        conversation.setStatus(ConversationStatus.CLOSED);
        conversationRepository.save(conversation);
        
        // Th√¥ng b√°o admin n·∫øu c√≥
        if (conversation.getAdmin() != null) {
            ChatMessage closeMessage = new ChatMessage(conversation, conversation.getUser(), 
                "üì¢ Kh√°ch h√†ng ƒë√£ r·ªùi kh·ªèi cu·ªôc h·ªôi tho·∫°i.");
            messageRepository.save(closeMessage);
            
            // G·ª≠i realtime notification
            ChatMessageDTO messageDTO = convertToMessageDTO(closeMessage);
            sendRealTimeMessage(messageDTO, false);
        }
        
        // C·∫≠p nh·∫≠t danh s√°ch cu·ªôc h·ªôi tho·∫°i cho admin
        messagingTemplate.convertAndSend(
            "/topic/admin/chat/conversations-update", 
            conversation.getId()
        );
    }
    
    /**
     * ƒê·∫øm s·ªë cu·ªôc h·ªôi tho·∫°i ch·ªù x·ª≠ l√Ω
     */
    public long getPendingConversationsCount() {
        return conversationRepository.countByStatusAndAdminIsNull(ConversationStatus.PENDING);
    }
    
    // Helper methods
    
    private boolean isUserAdmin(User user) {
        if (user == null) {
            return false;
        }
        return user.getRoles().stream()
            .anyMatch(role -> "ADMIN".equals(role.getName()) || user.isSuperAdmin());
    }
    
    private ChatConversationDTO convertToConversationDTO(ChatConversation conversation) {
        ChatConversationDTO dto = new ChatConversationDTO();
        dto.setId(conversation.getId());
        dto.setUserId(conversation.getUser().getId());
        dto.setUserName(conversation.getUser().getFullName() != null ? 
                       conversation.getUser().getFullName() : conversation.getUser().getUsername());
        dto.setUserEmail(conversation.getUser().getEmail());
        
        if (conversation.getAdmin() != null) {
            dto.setAdminId(conversation.getAdmin().getId());
            dto.setAdminName(conversation.getAdmin().getFullName() != null ? 
                           conversation.getAdmin().getFullName() : conversation.getAdmin().getUsername());
        }
        
        dto.setStatus(conversation.getStatus());
        dto.setCreatedAt(conversation.getCreatedAt());
        dto.setLastMessageAt(conversation.getLastMessageAt());
        dto.setSubject(conversation.getSubject());
        dto.setUnreadCountUser(conversation.getUnreadCountUser());
        dto.setUnreadCountAdmin(conversation.getUnreadCountAdmin());
        
        // L·∫•y tin nh·∫Øn cu·ªëi c√πng
        List<ChatMessage> latestMessages = messageRepository.findLatestMessageByConversation(
            conversation, PageRequest.of(0, 1));
        if (!latestMessages.isEmpty()) {
            ChatMessage lastMessage = latestMessages.get(0);
            dto.setLastMessage(lastMessage.getContent());
            dto.setLastMessageSender(lastMessage.getSender().getFullName() != null ? 
                                   lastMessage.getSender().getFullName() : lastMessage.getSender().getUsername());
        }
        
        return dto;
    }
    
    private ChatMessageDTO convertToMessageDTO(ChatMessage message) {
        ChatMessageDTO dto = new ChatMessageDTO();
        dto.setId(message.getId());
        dto.setConversationId(message.getConversation().getId());
        dto.setSenderId(message.getSender().getId());
        dto.setSenderName(message.getSender().getFullName() != null ? 
                         message.getSender().getFullName() : message.getSender().getUsername());
        dto.setContent(message.getContent());
        dto.setType(message.getType());
        dto.setFileUrl(message.getFileUrl());
        dto.setFileName(message.getFileName());
        dto.setSentAt(message.getSentAt());
        dto.setIsRead(message.getIsRead());
        dto.setReadAt(message.getReadAt());
        
        // Debug log ƒë·ªÉ ki·ªÉm tra isUserAdmin
        boolean isFromAdmin = isUserAdmin(message.getSender());
        System.out.println("üîç convertToMessageDTO debug:");
        System.out.println("   - Message ID: " + message.getId());
        System.out.println("   - Sender ID: " + message.getSender().getId());
        System.out.println("   - Sender username: " + message.getSender().getUsername());
        System.out.println("   - Sender roles: " + message.getSender().getRoles().stream()
            .map(role -> role.getName()).reduce("", (a, b) -> a + "," + b));
        System.out.println("   - Is from admin: " + isFromAdmin);
        
        dto.setIsFromAdmin(isFromAdmin);
        
        return dto;
    }
    
    private void sendRealTimeMessage(ChatMessageDTO messageDTO, boolean isFromAdmin) {
        try {
            // G·ª≠i tin nh·∫Øn ƒë·∫øn admin channel chung ƒë·ªÉ t·∫•t c·∫£ admin nh·∫≠n ƒë∆∞·ª£c ngay l·∫≠p t·ª©c
            messagingTemplate.convertAndSend("/topic/admin/chat/messages", messageDTO);
            
            // G·ª≠i tin nh·∫Øn ƒë·∫øn specific admin conversation (cho backward compatibility)
            messagingTemplate.convertAndSend("/topic/admin/chat/conversation/" + messageDTO.getConversationId(), messageDTO);
            
            // G·ª≠i tin nh·∫Øn ƒë·∫øn user channel (lu√¥n g·ª≠i ƒë·ªÉ user c√≥ th·ªÉ th·∫•y tin nh·∫Øn t·ª´ admin)
            messagingTemplate.convertAndSend("/topic/user/" + messageDTO.getConversationId() + "/messages", messageDTO);
            
            // C·∫≠p nh·∫≠t danh s√°ch cu·ªôc h·ªôi tho·∫°i cho admin
            messagingTemplate.convertAndSend("/topic/admin/chat/conversations-update", messageDTO.getConversationId());
            
        } catch (Exception e) {
            System.err.println("Error sending real-time message: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    private void notifyAdminsNewConversation(ChatConversation conversation) {
        try {
            ChatConversationDTO conversationDTO = convertToConversationDTO(conversation);
            messagingTemplate.convertAndSend("/topic/admin/chat/new-conversation", conversationDTO);
        } catch (Exception e) {
            System.err.println("Error notifying admins of new conversation: " + e.getMessage());
            e.printStackTrace();
        }
    }
} 