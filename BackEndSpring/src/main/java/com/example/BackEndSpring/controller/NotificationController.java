package com.example.BackEndSpring.controller;

import com.example.BackEndSpring.model.Notification;
import com.example.BackEndSpring.model.Notification.NotificationType;
import com.example.BackEndSpring.service.NotificationService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api/admin/notifications")
@PreAuthorize("hasRole('ADMIN')")
@CrossOrigin(origins = {"http://localhost:3000", "http://localhost:3001"}, allowCredentials = "true")
public class NotificationController {
    
    @Autowired
    private NotificationService notificationService;
    
    /**
     * L·∫•y t·∫•t c·∫£ th√¥ng b√°o v·ªõi ph√¢n trang
     */
    @GetMapping
    public ResponseEntity<Page<Notification>> getAllNotifications(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "20") int size) {
        
        System.out.println("üîç NotificationController: getAllNotifications called with page=" + page + ", size=" + size);
        
        try {
            Page<Notification> notifications = notificationService.getAllNotifications(page, size);
            System.out.println("‚úÖ NotificationController: Found " + notifications.getTotalElements() + " notifications");
            return ResponseEntity.ok(notifications);
        } catch (Exception e) {
            System.err.println("‚ùå NotificationController: Error in getAllNotifications: " + e.getMessage());
            e.printStackTrace();
            throw e;
        }
    }
    
    /**
     * L·∫•y th√¥ng b√°o ch∆∞a ƒë·ªçc
     */
    @GetMapping("/unread")
    public ResponseEntity<List<Notification>> getUnreadNotifications() {
        List<Notification> notifications = notificationService.getUnreadNotifications();
        return ResponseEntity.ok(notifications);
    }
    
    /**
     * L·∫•y s·ªë l∆∞·ª£ng th√¥ng b√°o ch∆∞a ƒë·ªçc
     */
    @GetMapping("/unread/count")
    public ResponseEntity<Map<String, Long>> getUnreadCount() {
        System.out.println("üîç NotificationController: getUnreadCount called");
        
        try {
            long count = notificationService.getUnreadCount();
            System.out.println("‚úÖ NotificationController: Unread count = " + count);
            Map<String, Long> response = new HashMap<>();
            response.put("count", count);
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            System.err.println("‚ùå NotificationController: Error in getUnreadCount: " + e.getMessage());
            e.printStackTrace();
            throw e;
        }
    }
    
    /**
     * ƒê√°nh d·∫•u th√¥ng b√°o ƒë√£ ƒë·ªçc
     */
    @PutMapping("/{id}/read")
    public ResponseEntity<Map<String, String>> markAsRead(@PathVariable Long id) {
        boolean success = notificationService.markAsRead(id);
        Map<String, String> response = new HashMap<>();
        
        if (success) {
            response.put("message", "ƒê√£ ƒë√°nh d·∫•u th√¥ng b√°o ƒë√£ ƒë·ªçc");
            return ResponseEntity.ok(response);
        } else {
            response.put("error", "Kh√¥ng t√¨m th·∫•y th√¥ng b√°o");
            return ResponseEntity.notFound().build();
        }
    }
    
    /**
     * ƒê√°nh d·∫•u t·∫•t c·∫£ th√¥ng b√°o ƒë√£ ƒë·ªçc
     */
    @PutMapping("/read-all")
    public ResponseEntity<Map<String, String>> markAllAsRead() {
        notificationService.markAllAsRead();
        Map<String, String> response = new HashMap<>();
        response.put("message", "ƒê√£ ƒë√°nh d·∫•u t·∫•t c·∫£ th√¥ng b√°o ƒë√£ ƒë·ªçc");
        return ResponseEntity.ok(response);
    }
    
    /**
     * X√≥a th√¥ng b√°o
     */
    @DeleteMapping("/{id}")
    public ResponseEntity<Map<String, String>> deleteNotification(@PathVariable Long id) {
        boolean success = notificationService.deleteNotification(id);
        Map<String, String> response = new HashMap<>();
        
        if (success) {
            response.put("message", "ƒê√£ x√≥a th√¥ng b√°o");
            return ResponseEntity.ok(response);
        } else {
            response.put("error", "Kh√¥ng t√¨m th·∫•y th√¥ng b√°o");
            return ResponseEntity.notFound().build();
        }
    }
    
    /**
     * L·∫•y th√¥ng b√°o theo lo·∫°i
     */
    @GetMapping("/type/{type}")
    public ResponseEntity<List<Notification>> getNotificationsByType(@PathVariable String type) {
        System.out.println("üîç NotificationController: getNotificationsByType called with type=" + type);
        
        try {
            NotificationType notificationType = NotificationType.valueOf(type.toUpperCase());
            System.out.println("‚úÖ NotificationController: Valid notification type: " + notificationType);
            List<Notification> notifications = notificationService.getNotificationsByType(notificationType);
            System.out.println("‚úÖ NotificationController: Found " + notifications.size() + " notifications of type " + type);
            return ResponseEntity.ok(notifications);
        } catch (IllegalArgumentException e) {
            System.err.println("‚ùå NotificationController: Invalid notification type: " + type);
            System.err.println("‚ùå Available types: " + java.util.Arrays.toString(NotificationType.values()));
            return ResponseEntity.badRequest().build();
        } catch (Exception e) {
            System.err.println("‚ùå NotificationController: Error in getNotificationsByType: " + e.getMessage());
            e.printStackTrace();
            throw e;
        }
    }
    
    /**
     * L·∫•y th√¥ng b√°o m·ªõi nh·∫•t (24h g·∫ßn ƒë√¢y)
     */
    @GetMapping("/recent")
    public ResponseEntity<List<Notification>> getRecentNotifications() {
        List<Notification> notifications = notificationService.getRecentNotifications();
        return ResponseEntity.ok(notifications);
    }
    
    // ƒê√£ lo·∫°i b·ªè endpoint t·∫°o th√¥ng b√°o test theo y√™u c·∫ßu
    
    /**
     * D·ªçn d·∫πp th√¥ng b√°o c≈©
     */
    @DeleteMapping("/cleanup")
    public ResponseEntity<Map<String, String>> cleanupOldNotifications() {
        notificationService.cleanupOldNotifications();
        Map<String, String> response = new HashMap<>();
        response.put("message", "ƒê√£ d·ªçn d·∫πp th√¥ng b√°o c≈©");
        return ResponseEntity.ok(response);
    }
} 